generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Alumni {
  id             String    @id @default(cuid())
  name           String
  description    String
  major          String
  graduationYear Int
  rating         Float
  title          String
  company        String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  enroln         Int       @unique
  university     String
  followers      Follow[]
  comments       Comment[]
  jobPosts       JobPost[]
  webinars       Webinar[]
  post           post[]
  notificationRecived   notification[] @relation("AlumniNotificationsReceived")
  notificationCreated   notification[] @relation("AlumniNotificationsCreated")
}

model Student {
  id             String    @id @default(cuid())
  major          String
  graduationYear Int
  course         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  description    String
  enroln         Int       @unique
  university     String
  name           String
  comments       Comment[]
  likes          like[]
  following      Follow[]
  notificationReceived   notification[] @relation("StudentNotificationsReceived")
  notificationCreated   notification[]  @relation("StudentNotificationCreated")
}

model Follow{
  id         String @id @default(cuid())
  alumniId   String 
  studentId  String
  createdAt DateTime @default(now())

  alumni       Alumni @relation(fields: [alumniId], references: [id], onDelete:Cascade )
  student     Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([alumniId])
  @@index([studentId])
  @@unique([alumniId, studentId])
}

enum NotificationType{
  LIKE
  COMMENT
  FOLLOW
  NEW_POST
  NEW_JOB
  NEW_WEBINAR
}

enum UserType{
  Student
  Alumni
}


model notification {
    id            String @id @default(cuid())
    type          NotificationType
    read          Boolean @default(false)

    postId        String?
    commentId     String? 
    jobPostId     String? 
    webinarPost   String? 
    createdAt     DateTime @default(now())

    creatorId     String
    creatorType   UserType

    receiverId    String
    receiverType  UserType

    creatorAlumni Alumni? @relation("AlumniNotificationsCreated", fields: [creatorId], references: [id], onDelete: Cascade, map: "creatorAlumni")
    creatorStudent Student? @relation("StudentNotificationCreated",fields: [creatorId], references: [id], onDelete: Cascade, map: "creatorStudent")
    receiverAlumni Alumni? @relation("AlumniNotificationsReceived", fields: [receiverId], references: [id],onDelete: Cascade, map: "recevierAlumni")
    receiverStudent Student? @relation("StudentNotificationsReceived", fields: [receiverId], references: [id], onDelete: Cascade, map: "receiverStudent")

    @@index([creatorId])
    @@index([receiverId])
     
} 



model Webinar {
  id          String      @id @default(cuid())
  title       String
  description String
  date        DateTime
  alumniId    String
  link        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  alumni      Alumni   @relation(fields: [alumniId], references: [id])
}

model JobPost {
  id          String      @id @default(cuid())
  title       String
  description String
  date        DateTime
  alumniId    String
  link        String
  company     String
  location    String
  salary      Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  alumni      Alumni   @relation(fields: [alumniId], references: [id])
}

model post {
  id          String    @id @default(cuid())
  title       String
  description String
  alumniId    String
  alumni      Alumni @relation(fields: [alumniId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  likes       like[]
  comments    Comment[]

  @@index([alumniId])
}

model like{
  id        String @id @default(cuid())
  postId    String
  StudentId String
  createdAt DateTime @default(now())

  student Student @relation(fields: [StudentId], references: [id])
  post     post   @relation(fields: [postId], references: [id])

  @@index([postId])
  @@index([StudentId])

  @@unique([StudentId,postId])
}

model Comment {
  id          String      @id @default(cuid())
  description String
  studentId   String
  alumniId    String
  postId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  alumni      Alumni   @relation(fields: [alumniId], references: [id])
  student     Student  @relation(fields: [studentId], references: [id])
  post        post     @relation(fields: [postId], references: [id])

  @@index([alumniId])
  @@index([studentId])
}


